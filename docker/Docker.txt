------ DOCKER COMMANDS ------ 

docker images: List all Docker images on the local machine
docker pull <image>: Download an image from a registry
docker build <path>: Build an image from a Dockerfile
docker build -t <name>:<tag> <path>: Sets the given name and tag. Tag is optional
docker build --target: Specify which stage of a multi-stage Dockerfile you want to build up to and stop there
docker tag <image> <new_tag>: Add a tag to an image
docker rmi <image>: Remove an image
docker login -u <username> -p <password> <server>: Log in to a registry with given username and password
docker ps: List all running containers
docker ps -a: List all containers (including stopped ones)
docker run <image>: Run a container from an image
docker run -d <image>: Run a container in detached mode
docker run -it <image>: Run a container in interactive mode with a terminal
docker run -v <volume>:<path> <image>: Mount a volume when running a container
docker stop <container_id>: Stop a running container
docker start <container_id>: Start a stopped container
docker restart <container_id>: Restart a container
docker rm <container_id>: Remove a container
docker logs <container_id>: Fetch logs of a container
docker exec -it <container_id> <command>: Execute a command inside a running container
docker volume ls: List all volumes.
docker volume create <name>: Create a volume.
docker volume rm <name>: Remove a volume.
docker network ls: List all networks.
docker network create <name>: Create a new network.
docker network connect <network> <container>: Connect a container to a network.
docker network disconnect <network> <container>: Disconnect a container from a network.
docker network rm <name>: Remove a network.
docker container prune: Remove all stopped containers
docker container prune -f: Remove all stopped containers without confirmation prompt




------ DOCKER-COMPOSE COMMANDS ------ 

docker compose up: Create and start containers
docker compose up -d: Create and start containers in detached mode
docker compose up --build: Rebuilds images from the Dockerfile(s) before starting the services
docker compose down: Stop and remove containers, networks, images, and volumes
docker compose build: Build or rebuild services
docker compose logs: View output from containers
docker compose start: Start services
docker compose stop: Stop services
docker compose ps: List containers




------ DOCKERFILE ------ 

FROM <image>[:<tag>] [AS <name>]
- Sets the base image for all subsequent instructions in that Docker build stage.
- AS <name> command labels stages for reuse

WORKDIR /path/to/dir
- Creates the given directory inside the container if it doesn't exist.
- Changes the current working directory to the given directory for all subsequent commands (RUN, CMD, COPY, ADD, etc).

COPY <src> <dest>
- Copies files and directories from your local build context into the Docker image.

RUN command
- Executes a command inside the container image during the build process.
- Examples: 
    RUN tail -f /dev/null            # runs in /bin/sh
    RUN ["tail", "-f", "/dev/null"]  # avoids shell




------ DOCUMENTATION ------

Images
    -A Docker image is a read-only template that contains a filesystem snapshot (like code, dependencies, binaries) and
    metadata (like environment variables, entrypoints, etc.)
    -Images serve as a blueprint for creating Docker containers.
    -They are often built using a Dockerfile, which is a script containing a series of instructions for how to create
    the image.

Containers
    -A container is a running instance of an image.
    -Containers are isolated from each other and the host system, but they can communicate with each other.
    -Each container contains an application and its dependencies, and it shares the kernel of the host operating system.

Volumes
    -A volume is a persistent storage mechanism managed by Docker.
    -It stores data outside the container filesystem, so itâ€™s not lost when the container is deleted.
    -They provide a way to decouple the data from the container lifecycle.
    -Volumes can be shared among multiple containers.

Layers
    -A layer is a snapshot of the filesystem at a certain step during the build.
    -Layers are:
        Stacked to form the final image
        Immutable (unchangeable once created)
        Cached for faster rebuilds
        Read-only once created

    -Important notes:
        Each command run in a Dockerfile creates a new, separate image layer.
        Combining commands to reduce the amount of layers, reducing the image size, for example:
            RUN apt update && apt install -y curl

            It is a good practice to combine commands to avoid cache issues.
                In the previous example, if `apt update` is cached but `apt install` changes, Docker may reuse the old
                package list and install outdated packages.




------ DOCKER MULTISTAGE ------

Multi-stage builds in Docker allow you to use multiple FROM statements in a single Dockerfile.
You can use one image to build your application, and a different one to run it, keeping the final image clean and small.

Example:

# Stage 1: Build the Go binary
FROM golang:1.21 AS builder

WORKDIR /app
COPY . .
RUN go build -o myapp

# Stage 2: Create a minimal image
FROM alpine:latest

WORKDIR /app
COPY --from=builder /app/myapp .

CMD ["./myapp"]
